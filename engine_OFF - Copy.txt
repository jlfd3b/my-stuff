#include "Arduino.h" 

//#include "SamNonDuePin.h" 
//#include "variant.h" 

#include <due_can.h> 

#include <mcp_can.h> 

#include <SPI.h> 

 


#define TEST1_CAN_TRANSFER_ID 0x7E1   // can id

#define TEST1_CAN0_TX_PRIO 1 

#define CAN_MSG_DUMMY_DATA 0x00000000   //random 29 bits 

// CAN frame max data length 

#define MAX_CAN_FRAME_DATA_LEN 8 


  


//const int SPI_CS_PIN = 78;  

//MCP_CAN SW_CAN(SPI_CS_PIN); // Set CS pin 


// Message variable to be send 

//uint32_t CAN_MSG_1 = 0; 


 

// the setup function runs once 
void setup()  
{ 

// initialize digital pin LED_BUILTIN as an output.
  pinMode(5, OUTPUT);



//start CAN0 and filters 
CAN.init(CAN_BPS_500K); 

Can0.begin(CAN_BPS_500K); 

} 


void off() //send request to turn off engine 
{ 


CAN_FRAME frame1; 


frame1.id = TEST1_CAN_TRANSFER_ID; 


frame1.length = MAX_CAN_FRAME_DATA_LEN; 


//Priority 
frame1.priority = 0; 
frame1.rtr = 1; 


//Below we set the 8 data bytes in 32 bit (4 byte) chunks 
//Bytes can be set individually with frame1.data.bytes[which] = something 

frame1.data.low = 0x0531AE07; 


frame1.data.high = CAN_MSG_DUMMY_DATA; 


//We are using extended frames so mark that here. Otherwise it will just use 
//the first 11 bits of the ID set 


frame1.extended = 0; 


CAN.sendFrame(frame1); 


delay(100); 
} 



void keepalive()    //send keep alive for engine 
{ 

CAN_FRAME frame1; 

frame1.id = TEST1_CAN_TRANSFER_ID; 

frame1.length = MAX_CAN_FRAME_DATA_LEN; 
 

//Priority 
frame1.priority = 0; 

frame1.rtr = 1; 
 
//Below we set the 8 data bytes in 32 bit (4 byte) chunks 
//Bytes can be set individually with frame1.data.bytes[which] = something 
 


frame1.data.low = 0x013E0000; 
 
frame1.data.high = CAN_MSG_DUMMY_DATA; 
 

//We are using extended frames so mark that here. Otherwise it will just use 
//the first 11 bits of the ID set 
 

frame1.extended = 0; 
 
CAN.sendFrame(frame1); 
 
delay(100); 
} 
 


// the loop function runs over and over again forever
void loop()  
{  

off();   // go to engine off routine
//keepalive(); // go to keepalive routine 

delay(1500);  // wait 2.5 seconds  need to wait 2.5 sec but LED waits half sec so...

digitalWrite(5, LOW);   // turn the LED on (HIGH is the voltage level)
 delay(1000);                       // wait for a half second
 digitalWrite(5, HIGH);    // turn the LED off by making the voltage LOW

} 
